#!/usr/bin/env ruby

# vim: set filetype=ruby;

require 'auto-consul'
require 'optparse'
require 'socket'
require 'ostruct'

class UnknownCommandException < Exception
end

class Command < OpenStruct
  HELP = {
    "set_mode"   => "Dynamically determines the mode from the registry and parameters, and sets it (for next startup).",
    "set_server" => "Sets the mode (for next startup) to server.",
    "set_agent"  => "Sets the mode (for next startup) to agent.",
    "run"        => "Runs consul agent, dynamically determining the mode, with heartbeat if appropriate.",
    "direct_run" => "Runs consul agent, with no mode determination, with heartbeat if appropriate.",
    "heartbeat"  => "Runs heartbeat process, ticking to the registry at specified interval",
  }

  def local
    @local ||= AutoConsul::Local.bind_to_path(data_dir)
  end

  def cluster
    @cluster ||= AutoConsul::Cluster.new registry
  end

  def state
    @state ||= AutoConsul::RunState::CLIProvider.new
  end

  def heartbeat_addr
    if advertise.nil?
      bind
    else
      advertise
    end
  end

  def do_set_server
    puts "Setting to server mode."
    local.set_server!
    0
  end

  def do_set_agent
    puts "Setting to agent mode."
    local.set_agent!
    0
  end

  def do_set_mode
    cluster.set_mode! local, expiry, servers
    # Healthy exit
    0
  end

  def do_run
    if local.mode.nil?
      do_set_mode
    end
    do_direct_run
  end

  def do_direct_run
    runner = :no_op
    runner = :agent_runner if local.agent?
    runner = :server_runner if local.server?
    runner = AutoConsul::Runner.method(runner)
    opt = {}
    opt[:advertise] = advertise if ! advertise.nil?
    opt[:config_dir] = config_dir if ! config_dir.nil?
    monitor = runner.call(node, bind, expiry, local, cluster, opt)
    if with_heartbeat and ticks > 0
      monitor.while_up do |ap|
        # There's data exchange with the agent and with the registries
        # per heartbeat, which with Ruby's memory management could cause
        # process bloat over a long time.  So fork per heartbeat so we
        # can avoid the bloat in the long-running process.
        while true
          sleep ticks
          kid = fork { do_heartbeat }
          Process.waitpid kid
        end
      end
    end
    monitor.run!
    # Returns the exit status of the "consul agent" run.
    monitor.wait
  end

  def do_heartbeat
    if state.running?
      cluster.servers.heartbeat! node, heartbeat_addr, expiry if state.server?
      cluster.agents.heartbeat! node, heartbeat_addr, expiry if state.agent?
      # Healthy exit.
      0
    else
      # Not running; can't heartbeat.
      1
    end
  end

  def self.commands
    cmds = instance_methods.collect {|m| m.to_s}.find_all {|m| m[0..2] == 'do_'}.collect {|n| n[3..-1]}
    cmds.collect do |name|
      [name, HELP[name] || '']
    end
  end

  def execute cmd
    command = "do_#{cmd}".to_sym
    if respond_to? command
      send command
    else
      raise UnknownCommandException.new("Unknown command: #{cmd}")
    end
  end
end

runner = Command.new(:advertise => nil,
                     :bind      => "0.0.0.0",
                     :data_dir => '/tmp/consul/state',
                     :dc      => 'dc1',
                     :with_heartbeat => false,
                     :expiry  => 120,
                     :servers => 1,
                     :ticks   => 60,
                     :node    => Socket.gethostname.split('.', 2)[0])

parser = OptionParser.new do |opts|
  opts.banner = "Usage: auto-consul [options] COMMAND"

  opts.on("-c", "--config-dir CONFIGDIR", String, "The Configuration Directory") do |c|
    runner.config_dir = c
  end

  opts.on("-r", "--registry URL", String, "The cluster registry URL") do |u|
    runner.registry = u
  end

  opts.on("-d", "--data-dir PATH", String, "The path where local state will be preserved.") do |d|
    runner.data_dir = d
  end

  opts.on("-a", "--address IPADDR", String, "The IP address to bind to and announce for cluster communication.") do |a|
    runner.advertise = runner.bind = a
  end

  opts.on("--advertise IPADDR", String, "The IP address to advertise for cluster communication.  Must be routable.  Defaults to the bound address.") do |a|
    runner.advertise = a
  end

  opts.on("-b", "--bind IPADDR", String, "The IP address to bind to for cluster communication.  Defaults to 0.0.0.0, which consul handles specially.") do |a|
    runner.bind = a
  end

  opts.on("-n", "--node NAME", String, "The unique name by which the node identifies itself within the cluster.") do |n|
    runner.node = n
  end

  opts.on("-e", "--expiry SECONDS", Integer, "The expiration time (in seconds) for registry heartbeats") do |e|
    runner.expiry = e.to_i
  end

  opts.on("-t", "--ticks SECONDS", Integer, "The time between heartbeats (in seconds) for registry heartbeats; use of this activates a concurrent heartbeat thread for the 'run' command.") do |t|
    runner.ticks = t.to_i
    runner.with_heartbeat = true
  end

  opts.on("-s", "--servers NUMBER", Integer, "The desired number of consul servers.") do |s|
    runner.servers = s.to_i
  end

  opts.on('-h', '--help', "Show this help message.") do
    puts opts
    exit
  end

  opts.separator ''
  opts.separator 'Commands:'
  Command.commands.sort.each do |name, help|
    opts.separator ''
    opts.separator "    #{name}"
    opts.separator "        #{help}" if help.size > 0
  end
end

parser.parse!

begin
  status = runner.execute(ARGV.shift)
  exit status
rescue UnknownCommandException => e
  puts e.message
  puts parser
  exit 2
end

